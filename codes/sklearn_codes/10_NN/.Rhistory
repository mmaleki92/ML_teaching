library("swirl")
swirl()
c(0.5,55-10,6)
quit
quit()
bye()
swirl()
setwd("~/Desktop")
ds = read.csv('placement.csv',heade = TRUE, stringsAsFactors = TRUE)
View(ds)
ds[0]
ds$Gender
ds$Gender = factor(ds$Gender, levels = c("Male", "Female"), labels = c(1,2))
ds$Gender = factor(ds$Gender, levels = c("Male", "Female"), labels = c(0,1))
ds$Gender = factor(ds$Gender, levels = c("Male", "Female"), labels = c(0,1))
ds = read.csv('placement.csv',heade = TRUE, stringsAsFactors = TRUE)
ds$Gender = factor(ds$Gender, levels = c("Male", "Female"), labels = c(0,1))
unique(ds$Country)
ds$Country
ds$Country = gsub('\\s+', '', ds$Country)
unique(ds$Country)
unique(ds$Final.Score)
ds$Finalmapped = as.integer(factor(ds$Final.Score,
levels = unique(ds$Final.Score),
labels = seq(4)
))
ds$Finalmapped = as.integer(factor(ds$Final.Score,
levels = unique(ds$Final.Score),
labels = c(2,4,1,3)
))
ds$Finalmapped = as.integer(factor(ds$Final.Score,
levels = unique(ds$Final.Score),
labels = c(4,1,3,2)
))
ds$Finalmapped = as.integer(factor(ds$Final.Score,
levels = c("Fail", "Pass", "Merit", "Distinction"),
labels = seq(4)
))
ds$Final.Score = as.integer(factor(ds$Final.Score,
levels = c("Fail", "Pass", "Merit", "Distinction"),
labels = seq(4)
))
len(unique(ds$Country))
length(unique(ds$Country))
ds$Country = gsub('\\s+', '', ds$Country)
ds$Country = factor(ds$Country,
levels = unique(ds$Country),
labels = seq(length(unique(ds$Country))))
ds = read.csv('placement.csv',heade = TRUE, stringsAsFactors = TRUE)
# Male 0, female 1
ds$Gender = factor(ds$Gender, levels = c("Male", "Female"), labels = c(0,1))
# Remove whitespace
ds$Country = gsub('\\s+', '', ds$Country)
ds$Country = factor(ds$Country,
levels = unique(ds$Country),
labels = seq(length(unique(ds$Country))))
# Map output
ds$Final.Score = as.integer(factor(ds$Final.Score,
levels = c("Fail", "Pass", "Merit", "Distinction"),
labels = seq(4)
))
regressor = lm(formula = Final.Score ~.,
data = ds)
summary(regressor)
regressor2 = lm(formula = Final.Score ~ Gender,
data = ds)
summary(regressor2)
coef(regressor)
names(coef(regressor))
ds = read.csv('placement.csv',heade = TRUE, stringsAsFactors = TRUE)
# Male 0, female 1
ds$Gender = factor(ds$Gender, levels = c("Male", "Female"), labels = c(0,1))
# Remove whitespace
ds$Country = gsub('\\s+', '', ds$Country)
ds$Country
ds$Country = as.factor(ds$Country)
ds$Country
ds$Gender = as.factor(ds$Gender)
ds$Gender
ds$Final.Score = as.integer(factor(ds$Final.Score,
levels = c("Fail", "Pass", "Merit", "Distinction"),
labels = seq(4)
))
ds = read.csv('placement.csv',heade = TRUE, stringsAsFactors = TRUE)
# Male 0, female 1
ds$Gender = as.factor(ds$Gender)
# Remove whitespace
ds$Country = gsub('\\s+', '', ds$Country)
ds$Country = as.factor(ds$Country)
# Encode country labels
# ds$Country = factor(ds$Country,
#                     levels = unique(ds$Country),
#                     labels = seq(length(unique(ds$Country))))
# Map output to integers
ds$Final.Score = as.integer(factor(ds$Final.Score,
levels = c("Fail", "Pass", "Merit", "Distinction"),
labels = seq(4)
))
regressor = lm(formula = Final.Score ~.,
data = ds)
summary(regressor)
library(ggplot2)
x_grid = seq(min(ds$Placement.Test.Score), max(ds$Placement.Test.Score), 0.1)
ggplot() +
geom_point(aes(x = ds$Placement.Test.Score, y = ds$Final.Score),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Title') +
xlab('x variable') +
ylab('y variable')
library(ggplot2)
library('ggplot2')
ds = read.csv('placement.csv',heade = TRUE, stringsAsFactors = TRUE)
# Male 0, female 1
ds$Gender = as.factor(ds$Gender)
# Remove whitespace
ds$Country = gsub('\\s+', '', ds$Country)
ds$Country = as.factor(ds$Country)
# Encode country labels
# ds$Country = factor(ds$Country,
#                     levels = unique(ds$Country),
#                     labels = seq(length(unique(ds$Country))))
# Map output to integers
ds$Final.Score = as.integer(factor(ds$Final.Score,
levels = c("Fail", "Pass", "Merit", "Distinction"),
labels = seq(4)
))
regressor = lm(formula = Final.Score ~.,
data = ds)
summary(regressor)
library(ggplot2)
x_grid = seq(min(ds$Placement.Test.Score), max(ds$Placement.Test.Score), 0.1)
ggplot() +
geom_point(aes(x = ds$Placement.Test.Score, y = ds$Final.Score),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Title') +
xlab('x variable') +
ylab('y variable')
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
source('~/Desktop/test.R', echo=TRUE)
ds = read.csv('placement.csv',heade = TRUE, stringsAsFactors = TRUE)
# Male 0, female 1
ds$Gender = as.factor(ds$Gender)
# Remove whitespace
ds$Country = gsub('\\s+', '', ds$Country)
ds$Country = as.factor(ds$Country)
ds$Final.Score = as.integer(factor(ds$Final.Score,
levels = c("Fail", "Pass", "Merit", "Distinction"),
labels = seq(4)
))
regressor = lm(formula = Final.Score ~.,
data = ds)
summary(regressor)
plot(ds$Placement.Test.Score, ds$Final.Score, main="Scatterplot Example",
xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
abline(lm(ds$Final.Score ~ ds$Placement.Test.Score), col = "red")
regressor_optimum =  lm(formula = Final.Score ~.,
data = ds)
step(regressor_optimum, direction = "backward")
summary(regressor)
summary(regressor_optimum)
summary(regressor)
step(regressor_optimum, direction = "backward")
summary(regressor_optimum)
summary(regressor_optimum)
step(regressor_optimum, direction = "backward")
step(regressor_optimum, direction = "backward")
source('~/Desktop/test.R', echo=TRUE)
regressor_optimum = step(regressor_optimum, direction = "backward")
source('~/Desktop/test.R', echo=TRUE)
regressor = lm(formula = Final.Score ~.,
data = ds)
summary(regressor)
step(regressor_optimum, direction = "backward")
ds = read.csv('placement.csv',heade = TRUE, stringsAsFactors = TRUE)
# Male 0, female 1
ds$Gender = as.factor(ds$Gender)
# Remove whitespace
ds$Country = gsub('\\s+', '', ds$Country)
ds$Country = as.factor(ds$Country)
# Encode country labels
# ds$Country = factor(ds$Country,
#                     levels = unique(ds$Country),
#                     labels = seq(length(unique(ds$Country))))
# Map output to integers
ds$Final.Score = as.integer(factor(ds$Final.Score,
levels = c("Fail", "Pass", "Merit", "Distinction"),
labels = seq(4)
))
regressor = lm(formula = Final.Score ~.,
data = ds)
regressor_optimum =  lm(formula = Final.Score ~.,
data = ds)
step(regressor_optimum, direction = "both", trace = 0)
summary(regressor)$r.square
summary(regressor_optimum)$r.square
library(caTools)
split = sample.split(ds, SplitRatio = 0.8)
training_set = subset(ds, split == TRUE)
test_set = subset(ds, split == FALSE)
y_pred = predict(regressor, newdata = test_set)
ds = read.csv('placement.csv',heade = TRUE, stringsAsFactors = TRUE)
# Male 0, female 1
ds$Gender = as.factor(ds$Gender)
# Remove whitespace
ds$Country = gsub('\\s+', '', ds$Country)
ds$Country = as.factor(ds$Country)
# Map output to integers
ds$Final.Score = as.integer(factor(ds$Final.Score,
levels = c("Fail", "Pass", "Merit", "Distinction"),
labels = seq(4))
)
# Splitting dataset
library(caTools)
split = sample.split(ds, SplitRatio = 0.8)
training_set = subset(ds, split == TRUE)
test_set = subset(ds, split == FALSE)
regressor = lm(formula = Final.Score ~.,
data = training_set)
y_pred = predict(regressor, newdata = test_set)
y_pred
test_set$Final.Score
error = sum((y_pred - test_set$Final.Score)^2)/length(y_pred)
error
summary(regressor)
aggdata = aggregate(ds, by=unique(ds$Country),
FUN=mean, na.rm=TRUE)
aggdata = aggregate(ds, by=list(unique(ds$Country)),
FUN=mean, na.rm=TRUE)
aggdata = aggregate(ds, by=Country,
FUN=mean, na.rm=TRUE)
aggdata = aggregate(ds, by=ds$Country,
FUN=mean, na.rm=TRUE)
aggdata = aggregate(ds, by=list(ds$Country),
FUN=mean, na.rm=TRUE)
View(aggdata)
warnings()
ds["Gender"]
ds[,c("Country", "Final.score")]
ds[,c("Country", "Final.Score")]
aggdata = aggregate(ds[,c("Country", "Final.Score")], by=list(ds$Country),
FUN=mean, na.rm=TRUE)
View(aggdata)
aggdata = aggregate(ds[,c("Country", "Final.Score")], by=list(Country),
FUN=mean, na.rm=TRUE)
aggdata = aggregate(ds[,c("Country", "Final.Score")], by=list(ds$Country),
FUN=mean, na.rm=TRUE)
ds2 = ds[,c("Country", "Final.Score")
ds2
ds2 = ds[,c("Country", "Final.Score")]
ds2
View(ds2)
aggdata = aggregate(ds2, by=list(ds2$Country),
FUN=mean, na.rm=TRUE)
aggdata = aggregate(ds[,c("Country", "Final.Score")], by=list(ds$Country),
FUN=mean, na.rm=TRUE)
View(aggdata)
aggdata = aggregate(ds, by=list(ds$Country),
FUN=mean, na.rm=TRUE)
aggdata = aggregate(ds$Final.Score, by=list(ds$Country),
FUN=mean, na.rm=TRUE)
aggdata
View(aggdata)
aggdata[1]
aggdata[2]
install.packages('plotly')
library(plotly)
p <- plot_ly(
x = c("giraffes", "orangutans", "monkeys"),
y = c(20, 14, 23),
name = "SF Zoo",
type = "bar"
)
p
library(plotly)
p <- plot_ly(
x = c("giraffes", "orangutans", "monkeys"),
y = c(20, 14, 23),
name = "SF Zoo",
type = "bar"
)
p
library(plotly)
p <- plot_ly(
x = aggdata[1],
y = aggdata[2],
name = "Average final score by countries",
type = "bar"
)
# # Create a shareable link to your chart
# # Set up API credentials: https://plot.ly/r/getting-started
chart_link = plotly_POST(p, filename="bar/basic")
chart_link
library(plotly)
p <- plot_ly(
x = aggdata[1],
y = aggdata[2],
name = "Average final score by countries",
type = "bar"
)
p
aggdata[1]
c(aggdata[1])
library(plotly)
p <- plot_ly(
x = c(aggdata[1]),
y = c(aggdata[2]),
name = "Average final score by countries",
type = "bar"
)
p
aggdata[1]
# Plot the bar chart.
barplot(aggdata[2],names.arg = aggdata[1],xlab = "Country",ylab = "Average score",col = "blue",
main = "Average grade by country",border = "red")
barplot(c(aggdata[2]),names.arg = aggdata[1],xlab = "Country",ylab = "Average score",col = "blue",
main = "Average grade by country",border = "red")
aggdata[2]
c(aggdata[2])
# Plot the bar chart.
barplot(c(aggdata[2]),names.arg = c(aggdata[1]),xlab = "Country",ylab = "Average score",col = "blue",
main = "Average grade by country",border = "red")
regressor = lm(formula = Final.Score ~.,
data = ds)
error = sum((y_pred - test_set$Final.Score)^2)/length(y_pred)
error
regressor = lm(formula = Final.Score ~.,
data = ds)
summary(regressor)
plot(ds$Placement.Test.Score, ds$Final.Score, main="Scatterplot Example",
xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
abline(lm(ds$Final.Score ~ ds$Placement.Test.Score), col = "red")
source('~/Desktop/test.R', echo=TRUE)
biregressor = lm(formula = Final.Score ~ Placement.Test.Score,
data = ds)
summary(biregressor)
summary(regressor)
summary(regressor)
setwd("~/Desktop/Comsci/machine_learning/Udemy_ML/10_NN")
ds = read.csv('Churn_Modelling.csv')
ds = read.csv('Churn_Modelling.csv')
View(ds)
ds = read.csv('Churn_Modelling.csv')
ds = ds[, 4:]
ds = ds[4:]
ds = ds[4:14]
ds[2:3]
ds[2:3] = as.factor(ds[2:3])
ds$Geography = as.factor(ds$Geography)
ds$Gender = as.factor(ds$Gender)
ds
ds$Gender = factor(ds$Gender,
levels = c('Female', 'Male'),
labels = c(0,1))
ds
ds$Gender
ds = read.csv('Churn_Modelling.csv')
ds = ds[4:14]
ds$Gender
ds$Gender = as.numeric(as.factor(ds$Gender))
ds$Gender
ds$Geography
ds$Geography = as.numeric(as.factor(ds$Geography))
ds$Geography
# Reading in Data
ds = read.csv('Churn_Modelling.csv')
ds = ds[4:14]
ds[2:3] = as.numeric(as.factor(ds[2:3]))
ds['Geography']
ds['Geography', 'Gender']
ds[c('Geography', 'Gender')]
ds[c('Geography', 'Gender')] = as.numeric(as.factor(ds[c('Geography', 'Gender')]))
ds = read.csv('Churn_Modelling.csv')
ds = ds[4:14]
ds$Geography = as.numeric(as.factor(ds$Geography))
ds$Gender = as.numeric(as.factor(ds$Gender))
ds$Gender = as.numeric(factor(ds$Gender,
labels = c(0,1)))
# Reading in Data
ds = read.csv('Churn_Modelling.csv')
ds = ds[4:14]
ds$Geography = as.numeric(as.factor(ds$Geography))
ds$Gender = as.numeric(factor(ds$Gender,
labels = c(0,1)))
ds$Gender
# Reading in Data
ds = read.csv('Churn_Modelling.csv')
ds = ds[4:14]
ds$Geography = as.numeric(as.factor(ds$Geography))
ds$Gender = as.numeric(factor(ds$Gender,
levels = c('Male', 'Female')
labels = c(0,1)))
# Reading in Data
ds = read.csv('Churn_Modelling.csv')
ds = ds[4:14]
ds$Geography = as.numeric(as.factor(ds$Geography))
ds$Gender = as.numeric(factor(ds$Gender,
levels = c('Male', 'Female'),
labels = c(0,1)))
# Scaling and splitting
ds$Gender
ds$Geography = as.numeric(as.factor(ds$Geography))
ds$Gender = as.numeric(as.factor(ds$Gender))
ds[-3]
ds[-1]
library(caTools)
ds[-11] = scale(ds[-11])
split = sample.split(ds$Purchased, SplitRatio = 0.8)
train = subset(ds, split == TRUE)
test = subset(ds, split == FALSE)
library(caTools)
split = sample.split(ds$Purchased, SplitRatio = 0.8)
train = subset(ds, split == TRUE)
test = subset(ds, split == FALSE)
source('~/Desktop/Comsci/machine_learning/Udemy_ML/10_NN/ANN.r', echo=TRUE)
library(caTools)
ds[-11] = scale(ds[-11])
split = sample.split(ds, SplitRatio = 0.8)
train = subset(ds, split == TRUE)
test = subset(ds, split == FALSE)
View(train)
# Reading in Data
ds = read.csv('Churn_Modelling.csv')
ds = ds[4:14]
ds$Geography = as.numeric(as.factor(ds$Geography))
ds$Gender = as.numeric(as.factor(ds$Gender))
# Scaling and splitting
library(caTools)
ds[-11] = scale(ds[-11])
split = sample.split(ds, SplitRatio = 0.8)
train = subset(ds, split == TRUE)
test = subset(ds, split == FALSE)
# Reading in Data
ds = read.csv('Churn_Modelling.csv')
ds = ds[4:14]
ds$Geography = as.numeric(as.factor(ds$Geography))
ds$Gender = as.numeric(as.factor(ds$Gender))
# Scaling and splitting
library(caTools)
ds[-11] = scale(ds[-11])
split = sample.split(ds, SplitRatio = 0.8)
train = subset(ds, split == TRUE)
test = subset(ds, split == FALSE)
# Reading in Data
ds = read.csv('Churn_Modelling.csv')
ds = ds[4:14]
ds$Geography = as.numeric(as.factor(ds$Geography))
ds$Gender = as.numeric(as.factor(ds$Gender))
# Scaling and splitting
library(caTools)
ds[-11] = scale(ds[-11])
split = sample.split(ds, SplitRatio = 0.8)
train = subset(ds, split == TRUE)
test = subset(ds, split == FALSE)
# Reading in Data
ds = read.csv('Churn_Modelling.csv')
ds = ds[4:14]
ds$Geography = as.numeric(as.factor(ds$Geography))
ds$Gender = as.numeric(as.factor(ds$Gender))
# Scaling and splitting
library(caTools)
ds[-11] = scale(ds[-11])
split = sample.split(ds, SplitRatio = 0.8)
train = subset(ds, split == TRUE)
test = subset(ds, split == FALSE)
# Reading in Data
ds = read.csv('Churn_Modelling.csv')
ds = ds[4:14]
ds$Geography = as.numeric(as.factor(ds$Geography))
ds$Gender = as.numeric(as.factor(ds$Gender))
# Scaling and splitting
library(caTools)
ds[-11] = scale(ds[-11])
split = sample.split(ds, SplitRatio = 0.8)
train = subset(ds, split == TRUE)
test = subset(ds, split == FALSE)
# Scaling and splitting
library(caTools)
ds[-11] = scale(ds[-11])
split = sample.split(ds$CreditScore, SplitRatio = 0.8)
train = subset(ds, split == TRUE)
test = subset(ds, split == FALSE)
# Scaling and splitting
library(caTools)
ds[-11] = scale(ds[-11])
split = sample.split(ds$Exited, SplitRatio = 0.8)
train = subset(ds, split == TRUE)
test = subset(ds, split == FALSE)
install.packages('h2o')
library('h2o')
h2o.init(nthreads = -1)
clf = h2o.deeplearning(y = 'Exited',
training_frame = as.h2o(train),
standardize = FALSE,
activation = "Rectifier",
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
prob_pred = h2o.predict(clf, newdata = test[-11])
prob_pred = h2o.predict(clf, newdata = as.h2o(test[-11])]
prob_pred = h2o.predict(clf, newdata = as.h2o(test[-11]))
prob_pred
y_pred = as.vector(prob_pred > 0.5)
cm = table(test[,11], y_pred)
cm
(1552+166)/(2000)
h2o.shutdown()
